# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QButtonGroup,QListView,QTableView
from PyQt5.QtGui import QStandardItemModel,QStandardItem
from PyQt5.QtCore import Qt,QModelIndex
from bs4 import BeautifulSoup
import requests
import json


f = open("setup.json", "r")
setup = json.load(f)
f.close()
base_url = setup["gogoanime_main"]


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 800)

        # Setup central widget
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Heading label
        self.Heading = QtWidgets.QLabel(self.centralwidget)
        self.Heading.setGeometry(QtCore.QRect(10, 10, 780, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.Heading.setFont(font)
        self.Heading.setObjectName("Heading")

        # Radio buttons for Single and Batch modes
        self.radioButton_single = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_single.setGeometry(QtCore.QRect(40, 120, 151, 17))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.radioButton_single.setFont(font)
        self.radioButton_single.setObjectName("radioButton_single")

        self.radioButton_batch = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_batch.setGeometry(QtCore.QRect(40, 150, 151, 17))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.radioButton_batch.setFont(font)
        self.radioButton_batch.setObjectName("radioButton_batch")

        # Button group to handle single/batch modes
        self.mode_group = QButtonGroup(self.centralwidget)
        self.mode_group.addButton(self.radioButton_single)
        self.mode_group.addButton(self.radioButton_batch)

        # Search input field and search label
        self.searchLabel = QtWidgets.QLabel(self.centralwidget)
        self.searchLabel.setGeometry(QtCore.QRect(10, 200, 221, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.searchLabel.setFont(font)
        self.searchLabel.setObjectName("searchLabel")

        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(140, 210, 400, 30))
        self.lineEdit.setClearButtonEnabled(True)
        self.lineEdit.setObjectName("lineEdit")

        # Button to trigger search
        self.searchButton = QtWidgets.QPushButton(self.centralwidget)
        self.searchButton.setGeometry(QtCore.QRect(560, 210, 100, 30))
        self.searchButton.setObjectName("searchButton")

        # List view for displaying search results
        self.AnimeSearchResults = QListView(self.centralwidget)
        self.AnimeSearchResults.setGeometry(QtCore.QRect(10, 260, 760, 200))
        self.AnimeSearchResults.setObjectName("AnimeSearchResults")

        self.model = QStandardItemModel()
        self.AnimeSearchResults.setModel(self.model)


        # Table view for batch download list
        self.AnimeBatchList = QTableView(self.centralwidget)
        self.AnimeBatchList.setGeometry(QtCore.QRect(10, 480, 760, 200))
        self.AnimeBatchList.setObjectName("AnimeBatchList")
        self.AnimeBatchList.setVisible(False)  # Hide initially

        # Download button
        self.downloadButton = QtWidgets.QPushButton(self.centralwidget)
        self.downloadButton.setGeometry(QtCore.QRect(10, 700, 200, 50))
        self.downloadButton.setObjectName("downloadButton")

        MainWindow.setCentralWidget(self.centralwidget)

        # Setup menubar and status bar
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # Warning Label
        self.warningLabel = QtWidgets.QLabel(self.centralwidget)
        self.warningLabel.setGeometry(QtCore.QRect(10, 60, 491, 30))
        self.warningLabel.setObjectName("warningLabel")
        self.warningLabel.setStyleSheet("color: red; font-size: 12px;")
        self.warningLabel.setText("")  # Initially empty
        self.warningLabel.setVisible(False)  # Hidden by default

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Signal connections
        self.mode_group.buttonClicked.connect(self.switch_mode)
        self.searchButton.clicked.connect(self.perform_search)
        self.downloadButton.clicked.connect(self.perform_download)

    def switch_mode(self, button):
        # Show/hide list or table depending on mode
        if button == self.radioButton_single:
            self.AnimeSearchResults.setVisible(True)
            self.AnimeBatchList.setVisible(False)
        elif button == self.radioButton_batch:
            self.AnimeSearchResults.setVisible(False)
            self.AnimeBatchList.setVisible(True)

    def perform_search(self):
        print("Search")
        def get_names(response):
            titles = response.find("ul", {"class": "items"}).find_all("li")
            names = []
            for i in titles:
                name = i.p.a.get("title")
                url = i.p.a.get("href")
                names.append([name, url])
            return names

        def search():

            """
            Search for anime and return download links for selected episodes.
            Returns:
                List[Dict[str, str]]: List of dictionaries containing episode information and download links.
            """
            while True:
                name = self.searchLabel.text
                print(f"Searching {name}")
                response = BeautifulSoup(requests.get(f"{base_url}/search.html?keyword={name}").text, "html.parser")

                try:
                    pages = response.find("ul", {"class": "pagination-list"}).find_all("li")
                    animes = [anime for page in pages for anime in get_names(BeautifulSoup(requests.get(f"{base_url}/search.html{page.a.get('href')}").text, "html.parser"))]
                except AttributeError:
                    animes = get_names(response)

                if not animes:
                    self.warningLabel.setText("No results found. Try again.")
                    self.warningLabel.setVisible(True)

                self.model.clear()
                # for i, (name, *_) in enumerate(animes, 1):
                #     print(name)
                #     item = QStandardItem(f"{i}: {name}")
                #     item.setData(name, Qt.UserRole + 1)  # Store anime name for later use
                #     self.model.appendRow(item)

                # while True:
                #     try:
                #         selected_anime = int(input(f"{Fore.YELLOW}Select anime number: {Style.RESET_ALL}")) - 1
                #         if 0 <= selected_anime < len(animes):
                #             break
                #         raise ValueError
                #     except ValueError:
                #         print(f"{Fore.RED}Invalid selection. Try again.{Style.RESET_ALL}")
                #
                # return create_links(animes[selected_anime])

        search()

    def handle_anime_selection(self, index):
        # Get the anime name that was stored in UserRole
        selected_anime = index.data(Qt.UserRole)
        print(f"Selected anime: {selected_anime}")  #

    def perform_download(self):
       print("Download")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Anime Downloader"))
        self.Heading.setText(_translate("MainWindow", "Anime Search and Download"))
        self.radioButton_single.setText(_translate("MainWindow", "Single"))
        self.radioButton_batch.setText(_translate("MainWindow", "Batch"))
        self.searchLabel.setText(_translate("MainWindow", "Search Anime:"))
        self.searchButton.setText(_translate("MainWindow", "Search"))
        self.downloadButton.setText(_translate("MainWindow", "Download"))

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
